---
layout: post
title: 파이썬 자료구조 Chapter 02 정수와 부동소수점 # title에 [괄호] 사용 금지
date: 2021-05-12 07:10:00 +0900 # 한국 시간 포맷 +0900
description: 파이썬 자료구조 Chapter 02 정수와 부동소수점 # Add post description (optional)
img: /data-structures-and-algorithms-in-python/data-structures-and-algorithms-in-python.png # Add image post (optional)
fig-caption: # Add figcaption (optional)
tags: [파이썬 자료구조와 알고리즘, 파이썬 내장 시퀀스 타입]
use_math: true
---

# PART 자료구조 Contents

- [PART 자료구조 Contents](#part-자료구조-contents)
- [chapter 02 내장 시퀀스](#chapter-02-내장-시퀀스)
  - [2.1 깊은 복사와 슬라이싱 연산](#21-깊은-복사와-슬라이싱-연산)
    - [2.1.1 가변성](#211-가변성)
    - [2.1.2 슬라이싱 연산자](#212-슬라이싱-연산자)
  - [2.2 문자열](#22-문자열)
    - [2.2.1 유니코드 문자열](#221-유니코드-문자열)
    - [2.2.2 문자열 메서드](#222-문자열-메서드)
  - [2.3 튜플](#23-튜플)
    - [2.3.1 튜플 메서드](#231-튜플-메서드)
    - [2.3.2 튜플 언패킹](#232-튜플-언패킹)
    - [2.3.3 네임드 튜플](#233-네임드-튜플)
  - [2.4 리스트](#24-리스트)
    - [2.4.1 리스트 메서드](#241-리스트-메서드)
    - [2.4.2 리스트 언패킹](#242-리스트-언패킹)
    - [2.4.3 리스트 컴프리헨션](#243-리스트-컴프리헨션)
    - [2.4.4 리스트 메서드 성능 측정](#244-리스트-메서드-성능-측정)
  - [2.5 바이트와 바이트 배열](#25-바이트와-바이트-배열)
    - [2.5.1 비트와 비트 연산자](#251-비트와-비트-연산자)
  - [2.6 연습문제](#26-연습문제)
    - [2.6.1 문자열 전체 반전](#261-문자열-전체-반전)
    - [2.6.2 문자열 단어 단위로 반전](#262-문자열-단어-단위로-반전)
    - [2.6.3 단순 문자열 압축](#263-단순-문자열-압축)
    - [2.6.4 문자열 순열](#264-문자열-순열)
    - [2.6.5 회문](#265-회문)
  
  
# chapter 02 내장 시퀀스

내장 시퀀스<sup>sequence</sup> 타입

- 멤버십<sup>membership</sup>연산 : `in` 키워드 사용
- 크기 함수 : `len(seq)`
- 슬라이싱<sup>slicing</sup> 속성 : `seq[:1]`
- 반복성<sup>iterability</sup> : 반복문에 있는 데이터를 순회할 수 있음

<br>

파이썬의 5개 내장 시퀀스 타입

- 문자열 `'str'`
- 튜플 `'tuple'`
- 리스트 `'list'`
- 바이트 배열 `'bytearray'`
- 바이트 `'type'`

생성 방법
```python
l = []
type(l)
<class 'list'>

s = ""
type(s)
<class 'str'>

t = ()
type(t)
<class 'tuple'>

ba = bytearray(b"")
type(ba)
<class 'bytearray'>

b = bytes([])
type(b)
<class 'type'>

```

---

## 2.1 깊은 복사와 슬라이싱 연산

### 2.1.1 가변성

1장에서 배운 점 : 파이썬 숫자는 불변<sup>immutable</sup>

이번 장 : 가변<sup>mutable</sup>객체 타입에 대해.

가변 데이터 : 리스트, 바이트 

불변 데이터(효율적<sub>가변 데이터보다</sub>) : 튜플, 문자열, 바이트

일부 컬렉션 데이터 타입은 불변 데이터 타입으로 인덱싱 가능

<br>

파이썬의 모든 변수는 객체 참조<sup>reference</sup>이므로 가변 객체를 복사할 때 매우 주의해야 함!

a = b 일때 a 는 실제 b가 가리키는 (참조하는) 곳을 가리킨다.

따라서 **깊은 복사**<sup>deep copy</sup>의 개념을 이해하는 것이 중요함.

Deep copy 예제
```python
# 리스트(list)
myList = [1, 2, 3, 4]
newList = myList[:]
newList2 = list(myList2)

# 셋(set)
people = {"버피", "애인절", "자일스"}
slayers = people.copy()
slayers.discard("자일스")
slayers.remove("에인절")

slayers
>>>{'버피'}

people
>>>{'자일스', '버피', '애인절'}

# 딕셔너리(dict)
myDict = {"안녕" : "세상"}
newDict = myDict.copy()

# 기타 객체의 깊은 복사는 copy 모듈 사용
import copy
myObj = "다른 어떤 객체"
newObj = copy.copy(myObj) # 얕은 복사 (shallow copy)
newObj2 = copy.deepcopy(myObj) # 깊은 복사 (deep copy)
```

### 2.1.2 슬라이싱 연산자

```python
seq[시작]
seq[시작:끝]
seq[시작: 끝: 스텝]

# 오른쪽(맨 끝)부터 읽을 때는 음수로
word = '뱀파이어를 조심해!'
word[-1]
>>>'!'

word[-2]
>>>'해'

word[-2:]
>>>'뱀파이어를 조심'

word[-0]
>>>'뱀'
```

---

## 2.2 문자열

파이썬 객체의 두가지 출력 형식

1. 문자열<sup>string</sup> 형식 : 사람을 위해 설계 됨

2. 표현 형식<sup>representational</sup> :  파이썬 인터프리터에서 사용하는 문자열로 보통 디버깅할 때 사용

파이썬 클래스 작성시 문자열 표현을 정의하는 것이 중요

### 2.2.1 유니코드 문자열

**유니코드**<sup>unicode</sup>는 전 세계 언어의 문자를 정의하기 위한 국제 표준 코드

공백, 특수문자, 수학 및 기타 분야의 기호들도 포함

파이썬 3부터 모든 문자열은 일반적인 바이트가 아닌 유니코드

문자 열 앞에 U 붙이면 유니코드 문자열을 만들 수 있음

```python
>>>u'잘가\0020세상 !'
'잘가 세상 !'
```

위의 이스케이스 시퀀스<sup>escape sequence</sup>는 서수 값이 0x0020인 유니코드 문자

일반적인 아스키 코드<sup>ASCII code</sup>의 표현은 7비트(아스키 코드를 확장한 ANSI 코드는 8비트)

유니코드 표현은 16비트 필요

---

### 2.2.2 문자열 메서드

**`join()`**

`A.join(B)` : 리스트 B에 있는 모든 문자열을 하나의 단일 문자열 A로 결합.

+를 사용할 수도 있지만 리스트에 많은 문자가 있다면 비효율적

```python
>>> slayer = ["버피", "앤", "아스틴"]
>>>" ".join(slayer)
'버피 앤 아스틴'
>>> "-<>-".join(slayer)
'버피-<>-앤-<>-아스틴'
>>>"".join(slayer)
'버피앤아스틴'
``` 

`join()` 메서드와 내장함수 `reversed()`를 같이 사용할 수 있음

```python
>>>"".join(reversed(slayer))
'아스틴앤버피'
```

---
**`ljust(), rjust()`**

`A.ljust(width, fillchar)` : 문자열 A **'맨 처음'** 부터 문자열을 포함한 길이 width 만큼 문자 fillchar를 채운다.

`A.rjust(width, fillchar)` : 문자열 A **'맨 끝'** 부터 문자열을 포함한 길이 width 만큼 문자 fillchar를 채운다.

```python
>>> name = "스칼렛"
>>> name.ljust(50, '-')
'스칼렛-----------------------------------------------' #len = 50

>>> name = "스칼렛"
>>> name.rjust(50, '-')
'-----------------------------------------------스칼렛' #len = 50
```
---
**`format()`**

A.format()은 문자열 A에 변수를 추가하거나 형식화하는데 사용
```python
>>> "{0} {1}".format("안녕,", "파이썬")
"안녕, 파이썬!"
>>> "이름: {who}, 나이: {age}".format(who="제임스", age=17)
'이름: 제임스, 나이: 17"
>>>"이름: {who}, 나이: {0}".format(12, who="에이미")
"이름: 에이미, 나이: 12"
```

파이썬 3.1부터 필드 이름이나 인덱스 생략 가능.

이런 경우 자동으로 순서대로 필드에 0부터 시작하는 번호를 매김

```python
>>> "{} {} {}".format("파이썬", "자료구조", "알고리즘")
'파이썬 자료구조 알고리즘'
```

+연산자를 사용하면 문자열 더 간결하게 결합 가능

지정자 s 는 문자열 형식, r은 표현 형식, a는 아스키 코드 형식을 의미

```python
>>> import decimal
>>> "{0} {0!s} {0!a}".format(decimal.Decimal("99.9"))
"99.9 99.9 Decimal('99.9')"
```

---

**문자열 언패킹**

문자열 매핑 언패킹<sup>mapping unpacking</sup> 연산자는 \*\* 이고 이를 사용하면 함수로 전달하기에 적합한 키-값 딕셔너리가 생성된다.

`local()` 메서드는 현재 스코프<sup>scope</sup>에 있는 지역 변수<sup>local variable</sup>을 딕셔너리로 반환한다.

```python
>>> hero = "버피"
>>> number = 999
>>> "{number}: {hero}".format(**locals())
'999: 버피'
```
---

**`splitlines()`**

A.splitlines()는  문자열 A에 대해 줄 바꿈 문자를 기준으로 분리한 결과를 문자열 리스트로 반환

```python
>>> slayres = "로미오\n줄리엣"
>>> slayres.splitlines()
['로미오', '줄리엣']
```

---

**`split()` 메서드**

`A.split(t, n)`은 문자열 A에서 문자열 t를 기준으로 정수 n번만큼 분리한 문자열 리스트 반환.

n을 지정하지 않으면 대상 문자열을 t로 최대한 분리

t도 지정하지 않으면 공백 문자<sup>whitespace</sup>로 구분한 문자열 리스트 반환

```python
>>> slayers ="버피*크리스-메리*16"
>>> fields = slayers.split("*")
>>> print(fields)
['버피', '크리스-메리', '16']

>>> job = fields[1].split("-")
>>> print(job)
['크리스', '메리']
```

`split()` 을 사용하여 모든 스페이스를 제거하는 함수 만들기

```python
def earse_space_from_string(string):
    s1 = string.split(" ")
    s2 = "".join(s1)
    return s2
```

비슷하게 `rsplit(t, n)` 메서드는 `split(t, n)`메서드와 같은 방식으로

문자열을 오른쪽에서 왼쪽으로 분리한 문자열 리스트를 반환한다

```python
>>> start = "안녕*세상*!"
>>> start.split("*", 1)
['안녕', '세상*!']
>>> start.rsplit("*", 1)
['안녕*세상', '!']
```

---

**`strip()`**

`A.strip(B)` :  문자열 A 앞 뒤의 문자열 B를 제거. 인수 B가 없으면 공백 문자를 제거.

```python
>>> slayers = "로미오 * 줄리엣999"
>>> slayers.strip("999")
'로미오 * 줄리엣'
```

`strip()` 메서드를 사용하여 한 파일에서 사용된 모든 단어를 알파벳순으로 출력하며 각 단어가 등장한 횟수도 함께 출력하는 함수

`count_unique_words.py`
```python
import string
import sys


def count_unique_word():
    words = {}
    strip = string.whitespace + string.punctuation + string.digits + "\"'"
    for filename in sys.argv[1:]:
        with open(filename) as file:
            for line in file:
                for word in line.lower().split():
                    word = word.strip(strip)
                    if len(word) > 2:
                        words[word] = words.get(word, 0) + 1

    for word in sorted(words):
        print("'{0}': {1}번".format(word, words[word]))


if __name__ == "__main__":
    count_unique_word()
```

`A.lstrip(chars)` :  문자열 A의 시작(왼쪽) 부분에 있는 문자열 chars 또는 공백을 제거

`A.rstrip(chars)` : 문자열 A의 끝(오른쪽) 부분에 있는 chars 또는 공백을 제거

---

**`swapcase()` 메서드**

`A.swapcase()` 는 문자열 A 에서 대소문자를 반전한 문자열의 복사본을 반환

```python
>>> slayers = "Buffy and Faith"
>>> slayers.swapcase()
'bUFFY AND fAITH'
```

`capitalize()` : 문자열 첫 글자 대문자로 변경한 복사본 반환

`lower()` : 전체 문자열을 소문자로 변경한 복사본 반환

`upper()` : 전체 문자열을 대문자로 변경한 복사본 반환

---

**`index()` `find()` 메서드**

문자열 안에서 또 다른 문자열의 인덱스를 찾는 메서드가 있다.

`A.index(sub, start, end)` : 문자열 A에서 부분 문자열 sub의 인덱스 위치를 반환하며 실패하면 `ValueError` 예외를 발생시킴.

`A.find(sub, start, end)` : 문자열 A에서 부분 문자열 sub의 인덱스 위치를 반환, 실패하면 -1을 반환

인덱스 start와 end는 문자열 범위, 생략할 경우 전체 문자열에서 부분 문자열 sub를 찾음

```python
>>> slayers = "Buffy and Faith"
>>> slayers.find("y")
4
>>> slayers.find("k")
-1
>>> slayers.index("k")
ValueError Traceback (most recent call last)
ValueError: substring not found
>>> slayers.index("y")
4
```

`rindex(sub, start, end)` : 문자열 끝(오른쪽)에서부터 일치하는 부분 문자열 sub의 인덱스를 반환

`rfind(sub, start, end)` : 마찬가지.

앞에서처럼 검색이 실패할 경우 `rindex()`는 `ValueError` 예외 발생, `rfind()` 메서드는 -1 리턴

---

**`count()` 메서드**

`A.count(sub, start, end)`는 문자열 A 에서 인덱스 start, end 범위 내의 부분 문자열 sub가 나온 횟수 반환

```python
>>> slayers = "Buffy is Buffy is Buffy"
>>> slayers.count("Buffy", 0, -1)
2
>>> slayers.count("Buffy")
3
```

---

**`replace()` 메서드**

`A.replace(old, new, maxreplace)` : 문자열 A에서 문자열 old를 대체 문자열 new로 maxrplace만큼 변경한 문자열의 복사본을 반환

maxreplace를 지정하지 않으면 모든 Old를 new 로 변경

```python
slayers = "Buffy is Buffy is Buffy"
slayers.replace("Buffy", "who", 2)

'who is who is Buffy'
```

---

**`f-strings`**

`f스트링`<sup>formatted string literal</sup> : 파이썬 3.6부터 사용 가능

문자열 앞에 접두사 f 를 붙이면 사용가능. 기존의 `%`나 `.format` 방식에 비해 간결, 직관적, 빠름

```python
>>> name = "Fread"
>>> f"his name is {name!r}."
"his name is 'Fread'."

>>> name = "Fread"
>>> f"his name is {repr(name)}" # repr() = !r"
"his name is 'Fread'"

>>> import decimal
>>> width = 10
>>> precision = 4
>>> value = decimal.Decimal("12.34567")
>>> f"결과 :{value:{width}.{precision}}" # 중첩 필드 사용
'결과 :     12.35'

>>> from datetime import datetime
>>> today = datetime(year =2021, month = 4, day = 27)
>>> f"{today:%B %d, %Y}" # 날짜 포맷 지정자(specifier) 사용
'April 27, 2021'

>>> number = 1024
>>> f"{number:#0x}" # 정수 포맷 지정자 사용(16진수 표현)
'0x400'
```

[스트링 관련 파이썬 공식문서 바로가기](https://www.python.org/dev/peps/pep-0498)

---

## 2.3 튜플

튜플<sup>tuple</sup> : 쉼표(,)로 구분된 값으로 이루어지는 불변 시퀀스 타입

중첩 가능. 값과 쉼표를 사용해 생성(괄호안에 쉼표 없이 값만 넣으면 튜플이 생성되지 않음)

```python
>>> empty = ()
>>> t1 = '안녕', # 또는 ('안녕',)
>>> len(empty)
0
>>> len(t1)
1
>>> t1
('안녕',)
>>> t2 = ('안녕',) 
>>> t2
>>> '안녕'
```

### 2.3.1 튜플 메서드

`A.count(x)` :  튜플 A 에 담긴 항목 X의 개수 반환

```python
>>> t = 1,5,7,8,9,4,1,4
>>> t.count(4)
2
```

`index(x)` : 항목 x의 엔덱스를 반환

```python
>>> t1 = 1,5,7
>>> t.index(5)
1
```

### 2.3.2 튜플 언패킹

파이썬에서 모든 반복가능한<sup>iterable</sup>객체는 **시퀀스 언패킹 연산자**<sup>sequence unpacking operator</sup> 사용하여 언패킹 가능

변수를 할당하는 문장에서 왼쪽 두개 이상의 변수를 사용하고 한 변수 앞에 \* 연산자가 붙으면, 오른쪽 값들 중 할당되고 남은 값들이 \* 연산자가 붙은 변수에 할당

```python
>>> x, *y = (1,2,3,4)
>>> x
1
>>> y
[2,3,4]

>>> *x, y = (1,2,3,4)
>>> x
[1,2,3]
>>> y
4
```

### 2.3.3 네임드 튜플

일반 튜플과 비슷한 성능과 특성 but 튜플 항목을 인덱스 위치 뿐만 아니라 이름으로도 참조 가능

**`collections.namedtuple()`**

1. 첫 번째 인수: 만들고자 하는 사용자 정의 튜플 데이터 타입의 이름(보통 왼쪽에 할당하는 변수의 이름과 똑같이 사용)

2. 두 번째 인수: 사용자 정의 튜플 각 항목을 지정하는 '공백으로 구분된 문자열' (리스트 또는 튜플 가능)

```python
>>> import collections
>>> Person = collections.namedtuple('Person', 'name age gender')
>>> # Person = collections.namedtuple('Person', ['name', 'age', 'gender'])
>>> # Person = collections.namedtuple('Person', ('name', 'age', 'gender'))
>>> p = Person('아스틴', 30, '남자')
>>> p
Person(name = '아스틴', age = 30, gender = '남자')
>>> p[0]
'아스틴'
>>> p.name
'아스틴'
>>> p.age = 20 # 에러: 일반 튜플과 마찬가지로 불변형이다.
Trabeback (most recent call last):
 File "<stdin>", line 1, in <module>
 AttiributeError: can't set attribute
```

---

## 2.4 리스트

일반적인 컴퓨터 과학에서 

**배열**<sup>array</sup> : 여러 요소(원소)들이 연속된 메모리에 순차적으로 저장되는 매우 간단한 구조. 요소에 **직접 접근**시 시간 복잡도 = $O(1)$ 어떤 위치에 항목을 **삽입**하려면 그 위치에서부터 모든 항목을 오른쪽으로 옮겨야하므로 시간복잡도 = $O(n)$

**연결 리스트**<sup>linked list</sup> : 여러 분리된 노드<sup>node</sup>가 서로 연결되어 있는 구조. 요소에 직접 접근시 시간 복잡도 = $O(n)$(연결리스트는 어떤 노드에 접근하려면 처음부터 순회<sup>iterating</sup>를 시작해야 한다. 어떤 노드를 삽입할 때 그 위치를 안다면 연결리스트 노드 수에 상관없이 시간 복잡도 = $O(1)$


파이썬에서 배열과 가장 유사한 객체 = **리스트** <sup>list</sup> 

리스트는 크기를 동적으로 조정할 수 있는 배열. 연결 리스트와 관련 없음

연결 리스트는 매우 중요한 **추상 데이터 타입**(ADT)

배열(또는 파이썬 리스트)과 연결 리스트의 차이점을 아는 것은 매우 중요

`append()`, `pop()`: 리스트 끝에서 항목을 추가하거나 제거할 때. 시간복잡도 = $O(1)$

`remove()`, `index()`, `멤버십 테스트 in`: 리스트 항목을 검색해야 하므로 시간복잡도= $O(n)$

`insert()` : 지정한 인덱스에 항목을 삽입한 후 , 그 이후의 인덱스 항목들을 한 칸씩 뒤로 밀어야 하므로 시간복잡도 = $O(n)$

검색이나 멤버십 테스트시 **빠른 속도** 가 필요하다면 **셋**<sup>set</sup>이나 **딕셔너리**<sup>dictionary</sup>같은 컬렉션 타입을 선택하는 것이 더 적합할 수 있음.

리스트에서 항목을 순서대로 정렬하여 보관하면 빠른 검색 제공

---

### 2.4.1 리스트 메서드

**`append()`**

`A.append(x)`는 리스트 A 끝에 항목 x를 추가. 

`A[len(A):] = [x]`와 동일한 의미

```python
>>> people = ["버피","페이스"]
>>> people.append("자일스")
>>> people
['버피', '페이스', '자일스']
>>> people[len(people):] = ["잰더"]
>>> people
['버피', '페이스', '자일스', '잰더']
```

---

**`extend()`**

`A.extend(c)`는 반복 가능한 모든 항목 c를 리스트 A에 추가. `A[len(A):] = c` 또는 `A += C`와 동일

```python
>>> people = ["버피","페이스"]
>>> people.extend("자일스")
>>> people
['버피', '페이스', '자', '일', '스']
>>> people +="윌로"
>>> people
['버피', '페이스', '자', '일', '스', '윌', '로']
>>> people +=["잰더"]
>>> people
['버피', '페이스', '자', '일', '스', '윌', '로', '잰더']
>>> people[len(people):] = "아스틴"
>>> people
['버피', '페이스', '자', '일', '스', '윌', '로', '잰더', '아', '스', '틴']
```

---

**`insert()`**

`A.insert(i, x)` 는 리스트 A의 인덱스 위치 i 에 항목 x 를 삽입한다

```python
>>> people = ["버피","페이스"]
>>> people.insert(1, "잰더")
>>> people
['버피', '잰더', '페이스']
```

---

**`remove()`**

`A.remove(x)` 는 리스트 A의 항목 X를 제거한다. X가 존재하지 않으면 `ValueError` 예외를 발생시킴

```python
>>> people = ["버피","페이스"]
>>> people.remove("버피")
>>> people
['페이스']
>>> people.remove("버피")
ValueError Traceback (most recent call last)
<ipython-input-12-bcef00a685a7> in <module>
      2 people.remove("버피")
      3 people
----> 4 people.remove("버피")

ValueError: list.remove(x): x not in list
```

---

**`pop()`**

`A.pop(x)`는 리스트 A에서 인덱스 x에 있는 항목을 제거하고 그 항목을 반환한다.

x를 지정하지 않으면, 리스트 맨 끝 항목을 제거하고 그 항목을 반환한다.

```python
>>> people = ["버피","페이스", "아스틴"]
>>> people.pop(1)
'페이스'
>>> people
['버피', '아스틴']
>>> people.pop()
'아스틴'
>> people
['버피']
```

---

**`del문`**

`del`문 : 리스트 인덱스를 지정, 특정 항목 삭제. 슬라이스를 사용하여 특정 범위 항목 삭제도 가능

```python
>>> a = [-1, 4, 5, 7, 10]
>>> del a[0]
>>> a
[4, 5, 7, 10]
>>> del a[2:3]
>>> a
[4, 5, 10]
>>> del a # 변수 a 자체를 삭제
>>> a

NameError                            Traceback (most recent call last)
<ipython-input-21-369f72d80e04> in <module>
      5 a
      6 del a # 변수 a 자체를 삭제
----> 7 a

NameError: name 'a' is not defined
```

객체 참조가 삭제 되고 다른 객체가 더 이상 그 데이터를 참조하지 않을 때

파이썬은 그 데이터 항목을 가비지 컬렉터<sup>garbage collector</sup>에 수집한다.

---

**`index()`**

`A.index(x)`: 리스트 A 에서 항목 x의 인덱스를 반환

```python
>>> people = ["버피", "페이스"]
>>> people.index("버피")
0
```

---

**`count()`**

`A.count(x)`: 리스트 A 에 항목 x가 몇개 들어 있는지 개수를 반환

```python
>>> people = ["버피", "페이스", "버피"]
>>> people.count("버피")
2
```

---

**`sort()`**

리스트 A의 항목을 정렬, 그 변수 자체에<sup>in place</sup>에 적용

`A.sort(key, reverse)`에 아무런 인수가 없으면 오름차순으로 정렬

인수를 지정할 때는 키워드 인수<sup>keyword argument</sup>를 사용해야 함

예: 리스트 항목을 내림차순으로 정렬하려면 `sort(reverse=True)`로 지정

인수 `key`를 지정하려면 함수를 넣어야함.

```python
>>> people = ["잰더", "페이스", "버피"]
>>> people.sort()
>>> people
['버피', '잰더', '페이스']
>>> people.sort(reverse=True)
>>> people
['페이스', '잰더', '버피']
```

응용 예제: 날짜 정렬 코드

```python
>>> import time
>>> timestamp = [
    "2021-05-05 01:17:31",
    "2021-05-05 02:17:28",
    "2021-05-05 06:39:26",
    "2021-05-10 07:30:35",
    "2021-05-10 11:32:33",
    "2021-05-10 12:35:48"
            ]
>>> def time_format(t):
        return time.strptime(t, '%Y-%m-%d %H:%M:%S')[0:6]

>>> timestamp.sort(key=time_format, reverse=True) #날짜를 최신순으로 정렬
>>> print(timestamp)
['2021-05-10 12:35:48', '2021-05-10 11:32:33', '2021-05-10 07:30:35', '2021-05-05 06:39:26', '2021-05-05 02:17:28', '2021-05-05 01:17:31']

>>> timestamp.sort(key= lambda x: time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6], reverse=True)
>>> print(timestamp)
['2021-05-10 12:35:48', '2021-05-10 11:32:33', '2021-05-10 07:30:35', '2021-05-05 06:39:26', '2021-05-05 02:17:28', '2021-05-05 01:17:31']
```

---

**`reverse()`**

`A.reverse()` 메서드 : 리스트 A의 항목 반전시켜 그 변수에 적용

`list[::-1]` 과 같음


```python
>>> people = ["잰더", "페이스", "버피"]
>>> people.reverse()
>>> people
['버피', '페이스', '잰더']
>>> people[::-1]
['잰더', '페이스', '버피']
```
---

### 2.4.2 리스트 언패킹

튜플 언패킹과 비슷

```python
>>> first, *rest = [1,2,3,4,5]
>>> first
1
>>> rest
[2, 3, 4, 5]
```

함수의 전달 인수로 리스트에 별(\*) 인수<sup>starred argument</sup>를 사용할 수 있음


```python
>>> def example_args(a, b, c):
        return a * b * c # 여기서 *는 곱셈

>>> L = [2,3,4]

>>> example_args(*L) # 리스트 언패킹
24
>>> example_args(2, *L[1:])
24
```

---

### 2.4.3 리스트 컴프리헨션

반복문의 표현식. 조건문을 포함할 수 도 있음. 형식은 다음과 같이 대괄호 **[ ]** 로 묶는다

* **[ 항목 for 항목 in 반복 가능한 객체 ]**
* **[ 표현식 for 항목 in 반복 가능한 객체 ]**
* **[ 표현식 for 항목 in 반복 가능한 객체 if 조건문 ]**

```python
>>> a = [y for y in range(1900, 1940) if y%4 == 0]
>>> a
[1900, 1904, 1908, 1912, 1916, 1920, 1924, 1928, 1932, 1936]

>>> b = [2**i for i in range(13)]
>>> b
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]

>>> c = [x for x in b if x%2 ==0]
>>> c
[2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]

>>> d = [str(round(355/113.0, i)) for i in range(1,6)]
>>> d
['3.1', '3.14', '3.142', '3.1416', '3.14159']

>>> words = 'Buffy is awesome and a vampire slayer'.split()
>>> e = [[w.upper(), w.lower(), len(w)] for w in words]

>>> for i in e:
        print(i)

['BUFFY', 'buffy', 5]
['IS', 'is', 2]
['AWESOME', 'awesome', 7]
['AND', 'and', 3]
['A', 'a', 1]
['VAMPIRE', 'vampire', 7]
['SLAYER', 'slayer', 6]
``` 

리스트 컴프리헨션은 **단순한 경우에만** 사용하는 것이 좋음

-> 가독성을 위해서는 여러 줄의 표현식과 조건문으로 표현하는 것이 리스트 컴프리헨션 한 줄로 표현하는 것보다 나을 수 있음

[구글 파이썬 스타일 가이드](https://github.com/google/styleguide/blob/gh-pages/pyguide.md) 에서 소개하는 리스트 컴프리헨션의 좋은 예와 나쁜 예 참조

1. 좋은 예

```python
Yes:
  result = [mapping_expr for value in iterable if filter_expr]

  result = [{'key': value} for value in iterable
            if a_long_filter_expression(value)]

  result = [complicated_transform(x)
            for x in iterable if predicate(x)]

  descriptive_name = [
      transform({'key': key, 'value': value}, color='black')
      for key, value in generate_iterable(some_input)
      if complicated_condition_is_met(key, value)
  ]

  result = []
  for x in range(10):
      for y in range(5):
          if x * y > 10:
              result.append((x, y))

  return {x: complicated_transform(x)
          for x in long_generator_function(parameter)
          if x is not None}

  squares_generator = (x**2 for x in range(10))

  unique_names = {user.name for user in users if user is not None}

  eat(jelly_bean for jelly_bean in jelly_beans
      if jelly_bean.color == 'black')
```


2. 나쁜 예

```python
No:
  result = [complicated_transform(
                x, some_argument=x+1)
            for x in iterable if predicate(x)]

  result = [(x, y) for x in range(10) for y in range(5) if x * y > 10]

  return ((x, y, z)
          for x in range(5)
          for y in range(5)
          if x != y
          for z in range(5)
          if y != z)
```

---

### 2.4.4 리스트 메서드 성능 측정

테스트: `timeit` 모듈의 `Timer` 객체를 생성해 사용.

`Timer` 객체의 첫 번째 매개변수 : 측정하고자 하는 코드

두 번째 매개변수 : 테스트를 위한 설정문

`timeit` 모듈은 명령문을 정해진 횟수만큼 실행하는 데 걸리는 시간을 측정(기본값: `number = 1000000`)

테스트 완료 시 문장이 수행된 시간(밀리초)을 부동소수점 값으로 반환

```python
def test1():
    l = []
    for i in range(1000):
        l = l + [i]


def test2():
    l = []
    for i in range(1000):
        l.append(i)


def test3():
    l = [i for i in range(1000)]


def test4():
    l = list(range(1000))


if __name__ == "__main__":
    import timeit
    t1 = timeit.Timer("test1()", "from __main__ import test1")
    print("concat ", t1.timeit(number=1000), "milliseconds")
    t2 = timeit.Timer("test2()", "from __main__ import test2")
    print("append ", t2.timeit(number=1000), "milliseconds")
    t3 = timeit.Timer("test3()", "from __main__ import test3")
    print("comprehension ", t3.timeit(number=1000), "milliseconds")
    t4 = timeit.Timer("test4()", "from __main__ import test4")
    print("list range ", t4.timeit(number=1000), "milliseconds")

>>>
concat  0.9828926390000561 milliseconds
append  0.07194113500008825 milliseconds
comprehension  0.03139724599895999 milliseconds
list range  0.013271247000375297 milliseconds
```

종합적으로 리스트 메서드의 시간복잡도는 다음과 같음

n은 리스트의 총 항목수 k는 연산(조회 및 추가) 항목수

|연산|시간복잡도|
|:---:|:---:|
|인덱스 []접근|$O(1)$|
|인덱스 할당|$O(1)$|
|append()|$O(1)$|
|pop()|$O(1)$|
|pop(i)|$O(1)$|
|insert(i)|$O(1)$|
|insert(i, 항목)|$O(1)$|
|del 연산자|$O(1)$|
|삽입|$O(1)$|
|멤버십 테스트in|$O(1)$|
|슬라이스 [x,y]조회|$O(k)$|}
|슬라이스 삭제|$O(n)$|
|슬라이스 할당|$O(n+k)$|
|reverse()|$O(n)$|
|연결<sup>concatenate</sup>|$O(k)$|
|sort()|$O(nlogn)$|
|곱하기|$O(nk)$|

---

## 2.5 바이트와 바이트 배열

파이썬은 원시 바이트<sup>raw byte</sup>를 처리하는 데 사용할 수 있는 데이터 타입으로 불변 타입의 바이트(byte)와 가변 타입의 바이트 배열(bytearray)을 제공

두 타입 모두 0~255 범위의 부호 없는 8 비트 정수 시퀀스

바이트 타입 : 문자열 타입과 유사

바이브 배열 타입 : 리스트 타입과 유사

```python
>>> blist = [1, 2, 3, 255]
>>> the_bytes = bytes(blist)
>>> the_bytes
b'\x01\x02\x03\xff'
>>> the_byte_array = bytearray(blist)
>>> the_byte_array
bytearray(b'\x01\x02\x03\xff')
>>>
>>> the_bytes[1] = 127 # 불변(immutable)
TypeError                     Traceback (most recent call last)
<ipython-input-70-d52bfbb74c55> in <module>
      6 the_byte_array
      7 
----> 8 the_bytes[1] = 127 # 불변(immutable)

TypeError: 'bytes' object does not support item assignment
>>>
>>> the_byte_array[1] = 127 # 가변(mutable)
>>> the_byte_array
bytearray(b'\x01\x7f\x03\xff')
```

---

### 2.5.1 비트와 비트 연산자

비트 연산자는 비트로 표현된 숫자 조작에 유용

예: 곱셈 연산자 대신 비트 연산자로 곱셈 가능

1 << x는 숫자 1을 x번만큼 **왼쪽으로 이동**<sup>left shift</sup>한다는 의미로 $2$<sup>$x$</sup>를 신속하게 계산 가능

또한 $x$ & $(x -1)$이 0 인지 확인하면, x가 2의 제곱인지 아닌지 신속하게 확인 가능

예: x가 4(=2<sup>2</sup>)인 경우, 4는 100<sub>(2)</sub>이고 x-1인 3은 011<sub>(2)</sub>

두 값에 비트 AND(&)을 적용하면 0이 된다. 즉 2<sup>x</sup>를 비트로 표현하면 100...0이 되고 2<sup>x</sup>을 비트로 표현하면 011...1이 되므로, 

이 두 값에 비트 AND 연산을 적용하면 0이 된다(x 는 0보다 큰 정수여야 함)

```python
>>> x = 4
>>> 1<< x
16
>>>
>>> x = 8
>>> x & (x-1)
0
>>>
>>> x = 6
>>> x & (x-1)
4
```

---

## 2.6 연습문제

---

### 2.6.1 문자열 전체 반전

내장 시퀀스 타입/`3_reversing_string.py`
```python
def revert(s):
    if s:
        s = s[-1] + revert(s[:-1])
    return s


def revert2(string):
    return string[::-1]


if __name__ == "__main__":
    str1 = "안녕 세상!"
    str2 = revert(str1)
    str3 = revert2(str1)
    print(str2)
    print(str3)

>>>
!상세 녕안
!상세 녕안
```

---

### 2.6.2 문자열 단어 단위로 반전

여러 방법이 있음

1. 파이썬 문자열은 불변 타입이므로 리스트를 사용하여 문제 해결 고려

2. 리스트 및 문자열 메서드를 사용할 수도 이지만, 포인터 사용 가능
   - 이 경우 코드는 두 개의 반복문으로 구성
   - 첫 번째 반복문은 두 포인터를 사용하여 전ㅊ 문장 반전
   - 두 번째 반복문에서는 공백을 만났을 때 각 단어를 다시 반전(즉 첫번재 반복문에서 반전했던 단어를 원래대로 돌련호음)
   - 공백은 " " 또는 유니코드(u0020)로 나타낼 수 있다는 것과 마지막 단어 공백 처리에 주의

---

내장 시퀀스 타입/`4_reversing_wrods.py`
```python
def reverser(string1, p1=0, p2=None):
    if len(string1) < 2:
        return string1
    p2 = p2 or len(string1)-1
    while p1 < p2:
        string1[p1], string1[p2] = string1[p2], string1[p1]
        p1 += 1
        p2 -= 1


def reversing_words_setence_logic(string1):
    # 먼저, 문장 전체를 반전한다.
    reverser(string1)
    # print(string1)
    p = 0
    start = 0
    while p < len(string1):
        if string1[p] == u"\u0020":
            # 단어를 다시 반전한다(단어를 원위치로 돌려놓는다).
            reverser(string1, start, p-1)
            # print(string1)
            start = p+1
        p += 1
    # 마지막 단어를 반전한다(단어를 원위치로 돌려놓는다).
    reverser(string1, start, p-1)
    # print(string1)
    return ''.join(string1)


if __name__ == "__main__":
    str1 = "파이썬 알고리즘 정말 재미있다"
    str2 = reversing_words_setence_logic(list(str1))
    print(str2)

>>>
재미있다 정말 알고리즘 파이썬
```

---

다음은 하나의 반복문만 사용하는 방법. 단어 단위로 나눠 리스트에 추가한 후 리스트를 반전

내장 시퀀스 타입/`5_reversing_words.py`
```python
def reverse_words_brute(string):
    word, sentence = [], []
    for character in string:
        if character != " ":
            word.append(character)
        else:
            # 조건문에서 빈 리스트는 False다. 여러 공백이 있는 경우, 조건문을 건너뛴다.
            if word:
                sentence.append(''.join(word))
            word = []

    # 마지막 단어가 있다면, 문장에 추가한다.
    if word != '':
        sentence.append(''.join(word))
    sentence.reverse()
    return " ".join(sentence)


if __name__ == "__main__":
    str1 = "파이썬 알고리즘 정말 재미있다"
    str2 = reverse_words_brute(str1)
    print(str2)

>>>
재미있다 정말 알고리즘 파이썬
```

---

문자열을 공백으로 구분해서 리스트를 생성한 다음 슬라이스를 사용할 수 도 있음

내장 시퀀스 타입/`6_reversing_words.py`
```python
def reversing_words_slice(word):
    new_word = []
    words = word.split(" ")
    for word in words[::-1]:
        new_word.append(word)
    return " ".join(new_word)


if __name__ == "__main__":
    str1 = "파이썬 알고리즘 정말 재미있다"
    str2 = reversing_words_slice(str1)
    print(str2)
  
>>>
재미있다 정말 알고리즘 파이썬
```

---

아예 반복문 없이 리스트와 문자열 메서드만으로도 해결 가능

내장 시퀀스 타입/`7_reversing_words.py`
```python
```python
def reversing_words(str1):
    words = str1.split(" ")
    rev_set = " ".join(reversed(words))
    return rev_set


def reversing_words2(str1):
    words = str1.split(" ")
    words.reverse()
    return " ".join(words)


if __name__ == "__main__":
    str1 = "파이썬 알고리즘 정말 재미있다"
    str2 = reversing_words(str1)
    str3 = reversing_words2(str1)
    print(str2)
    print(str3)

>>>
재미있다 정말 알고리즘 파이썬
재미있다 정말 알고리즘 파이썬
```

이 문제를 조금 더 확장하면 ! ? ; - . 등의 기호를 구분자로 사용하는 코드도 만들 수 있다


---

### 2.6.3 단순 문자열 압축

문자열 aabcccccaa를 a2b1c5a3 같은 형식으로 압축하는 예

내장 시퀀스/`8_simple_str_compression.py`
```python
def str_compression(s):
    count, last = 1, ""
    list_aux = []
    for i, c in enumerate(s):
        if last == c:
            count += 1
        else:
            if i != 0:
                list_aux.append(str(count))
            list_aux.append(c)
            count = 1
            last = c
    list_aux.append(str(count))
    return "".join(list_aux)


if __name__ == "__main__":
    result = str_compression("aabcccccaaa")
    print(result)

>>>
a2b1c5a3
```

---

### 2.6.4 문자열 순열

**순열**<sup>permutation</sup> : 서로 다른 n 개 중 r개를 골라 순서를 고려해 나열한 경우의 수

길이 n의 문자열이 입력으로 들어올 때 n개 문자 모두 선택하는 경우의 문자열을 나열해보자

`perm2()` 함수에서는 `itertools` 모듈을 사용했다.


내장 시퀀스 타입/`9_permutation.py`
```python
import itertools


def perm(s):
    if len(s) < 2:
        return s
    res = []
    for i, c in enumerate(s):
        for cc in perm(s[:i] + s[i+1:]):
            res.append(c + cc)
    return res


def perm2(s):
    res = itertools.permutations(s)
    return ["".join(i) for i in res]


if __name__ == "__main__":
    val = "012"
    print(perm(val))
    print(perm2(val))

>>>
['012', '021', '102', '120', '201', '210']
['012', '021', '102', '120', '201', '210']
```

012의 3개 문자에서 3개를 나열하는 순열의 경우의 수는

<sub>3</sub>P<sub>3</sub> = 3 x 3 x 1 = 6 이다.

<sub>n</sub>P<sub>n</sub> = n! 이므로 시간복잡도 역시 $O(n!)$ 이다.

위 코드를 응용하면 다음과 같이 입력 길이 n 일때 n 이하의 수에 대해서도 모든 순열의 경우를 나열할 수 있다.

내장 시퀀스 타입/`10_combination.py`
```python
def combinations(s):
    if len(s) < 2:
        return s
    res = []
    for i, c in enumerate(s):
        res.append(c)  # 추가된 부분
        for j in combinations(s[:i] + s[i+1:]):
            res.append(c + j)
    return res


if __name__ == "__main__":
    result = combinations("abc")
    print(result)

>>>
['a', 'ab', 'abc', 'ac', 'acb', 'b', 'ba', 'bac', 'bc', 'bca', 'c', 'ca', 'cab', 'cb', 'cba']
```


순열 : 순서 고려

조합<sup>combination</sup> : 은 순열에서 순서를 고려하지 않는다.


---

### 2.6.5 회문

회문<sup>palindrome</sup>이란 앞에서부터 읽으나 뒤에서부터 읽으나 동일한 단어나 구를 뜻함. 

**회문 예시 코드** 공백은 무시하며 세 가지 버전으로 구현

내장 시퀀스 타입/`11_palindrome.py`
```python
def is_palindrome(s):
    l = s.split(" ")
    s2 = ''.join(l)
    return s2 == s2[::-1]


def is_palindrome2(s):
    l = len(s)
    f, b = 0, l-1
    while f < l // 2:
        while s[f] == " ":
            f += 1
        while s[b] == " ":
            b -= 1
        if s[f] != s[b]:
            return False
        f += 1
        b -= 1
    return True


def is_palindrome3(s):
    s = s.strip()
    if len(s) < 2:
        return True
    if s[0] == s[-1]:
        return is_palindrome(s[1:-1])
    else:
        return False


if __name__ == "__main__":
    str1 = "다시 합창합시다"
    str2 = ""
    str3 = "hello"
    print(is_palindrome(str1))
    print(is_palindrome(str2))
    print(is_palindrome(str3))
    print('\b')
    print(is_palindrome2(str1))
    print(is_palindrome2(str2))
    print(is_palindrome2(str3))
    print('\b')
    print(is_palindrome3(str1))
    print(is_palindrome3(str2))
    print(is_palindrome3(str3))

>>>
True
True
False

True
True
False

True
True
False
```

---

